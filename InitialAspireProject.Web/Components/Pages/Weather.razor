@page "/weather"
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]
@attribute [Authorize]

@inject WeatherApiClient WeatherApi

<PageTitle>Weather - Initial Aspire Project</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Page Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="display-4">
                        <i class="bi bi-cloud-sun me-3"></i>
                        Previsão do Tempo
                    </h1>
                    <p class="lead text-muted">Dados carregados da API backend</p>
                </div>
                <div>
                    <span class="badge bg-info">
                        <i class="bi bi-arrow-clockwise me-1"></i>
                        Cache: 5min
                    </span>
                </div>
            </div>

            @if (forecasts == null)
            {
                <!-- Loading State -->
                <div class="row justify-content-center">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-body text-center py-5">
                                <div class="spinner-border text-primary mb-3" role="status">
                                    <span class="visually-hidden">Carregando...</span>
                                </div>
                                <h5 class="card-title">Carregando previsão do tempo...</h5>
                                <p class="text-muted">Aguarde enquanto buscamos os dados mais recentes</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <!-- Weather Cards Grid -->
                <div class="row">
                    @foreach (var forecast in forecasts)
                    {
                        <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                            <div class="card h-100 shadow-sm">
                                <div class="card-header bg-primary text-white text-center">
                                    <h6 class="mb-0">
                                        <i class="bi bi-calendar3 me-2"></i>
                                        @forecast.Date.ToString("dd/MM")
                                    </h6>
                                    <small>@forecast.Date.ToString("dddd")</small>
                                </div>
                                <div class="card-body text-center">
                                    <!-- Weather Icon -->
                                    <div class="mb-3">
                                        <i class="@GetWeatherIcon(forecast.Summary) text-primary" style="font-size: 3rem;"></i>
                                    </div>
                                    
                                    <!-- Temperature -->
                                    <div class="mb-3">
                                        <div class="display-6 fw-bold text-primary">
                                            @forecast.TemperatureC°C
                                        </div>
                                        <small class="text-muted">(@forecast.TemperatureF°F)</small>
                                    </div>
                                    
                                    <!-- Summary -->
                                    <div class="mb-2">
                                        <span class="badge @GetSummaryBadgeClass(forecast.Summary) fs-6">
                                            @forecast.Summary
                                        </span>
                                    </div>
                                </div>
                                <div class="card-footer text-center">
                                    <small class="text-muted">
                                        <i class="bi bi-thermometer-half me-1"></i>
                                        Sensação: @GetFeelsLike(forecast.TemperatureC)°C
                                    </small>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Summary Statistics -->
                <div class="row mt-4">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">
                                    <i class="bi bi-graph-up me-2"></i>
                                    Resumo da Semana
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="row text-center">
                                    <div class="col-md-3 col-6 mb-3">
                                        <div class="border-end border-md-end-0 border-bottom border-md-bottom-0">
                                            <div class="h4 text-danger">@forecasts.Max(f => f.TemperatureC)°C</div>
                                            <small class="text-muted">Máxima</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3 col-6 mb-3">
                                        <div class="border-end border-md-end-0 border-bottom border-md-bottom-0">
                                            <div class="h4 text-info">@forecasts.Min(f => f.TemperatureC)°C</div>
                                            <small class="text-muted">Mínima</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3 col-6 mb-3">
                                        <div class="border-end border-md-end-0">
                                            <div class="h4 text-success">@Math.Round(forecasts.Average(f => f.TemperatureC), 1)°C</div>
                                            <small class="text-muted">Média</small>
                                        </div>
                                    </div>
                                    <div class="col-md-3 col-6 mb-3">
                                        <div class="h4 text-warning">@forecasts.Length</div>
                                        <small class="text-muted">Dias</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Data Table (Responsive) -->
                <div class="row mt-4">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">
                                    <i class="bi bi-table me-2"></i>
                                    Dados Detalhados
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead class="table-dark">
                                            <tr>
                                                <th scope="col">
                                                    <i class="bi bi-calendar3 me-1"></i>
                                                    Data
                                                </th>
                                                <th scope="col" aria-label="Temperature in Celsius">
                                                    <i class="bi bi-thermometer-half me-1"></i>
                                                    Temp. (°C)
                                                </th>
                                                <th scope="col" aria-label="Temperature in Fahrenheit">
                                                    <i class="bi bi-thermometer me-1"></i>
                                                    Temp. (°F)
                                                </th>
                                                <th scope="col">
                                                    <i class="bi bi-cloud me-1"></i>
                                                    Condição
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var forecast in forecasts)
                                            {
                                                <tr>
                                                    <td>
                                                        <strong>@forecast.Date.ToString("dd/MM/yyyy")</strong>
                                                        <br>
                                                        <small class="text-muted">@forecast.Date.ToString("dddd")</small>
                                                    </td>
                                                    <td>
                                                        <span class="badge @GetTemperatureBadgeClass(forecast.TemperatureC)">
                                                            @forecast.TemperatureC°C
                                                        </span>
                                                    </td>
                                                    <td>@forecast.TemperatureF°F</td>
                                                    <td>
                                                        <i class="@GetWeatherIcon(forecast.Summary) me-2"></i>
                                                        @forecast.Summary
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await WeatherApi.GetWeatherAsync();
    }

    private string GetWeatherIcon(string? summary)
    {
        return summary?.ToLower() switch
        {
            var s when s?.Contains("sun") == true => "bi bi-sun-fill",
            var s when s?.Contains("rain") == true => "bi bi-cloud-rain-fill",
            var s when s?.Contains("cloud") == true => "bi bi-cloud-fill",
            var s when s?.Contains("snow") == true => "bi bi-snow",
            var s when s?.Contains("storm") == true => "bi bi-cloud-lightning-fill",
            var s when s?.Contains("wind") == true => "bi bi-wind",
            _ => "bi bi-cloud-sun-fill"
        };
    }

    private string GetSummaryBadgeClass(string? summary)
    {
        return summary?.ToLower() switch
        {
            var s when s?.Contains("sun") == true => "bg-warning text-dark",
            var s when s?.Contains("rain") == true => "bg-primary",
            var s when s?.Contains("cloud") == true => "bg-secondary",
            var s when s?.Contains("snow") == true => "bg-light text-dark",
            var s when s?.Contains("storm") == true => "bg-danger",
            _ => "bg-info"
        };
    }

    private string GetTemperatureBadgeClass(int temperature)
    {
        return temperature switch
        {
            >= 30 => "bg-danger",
            >= 20 => "bg-warning text-dark",
            >= 10 => "bg-success",
            >= 0 => "bg-info",
            _ => "bg-primary"
        };
    }

    private int GetFeelsLike(int temperature)
    {
        // Simulação simples de sensação térmica
        return temperature + Random.Shared.Next(-3, 4);
    }
}